import sys
import zmq
import threading

opencv_path = sys.argv[1]

print "Importing HeartRateGenerator and HeartRateImposer"
from data_analysis.heart_rate_generator import HeartRateGenerator
from server.heart_rate_imposer import HeartRateImposer
print "Imported HeartRateGenerator and HeartRateImposer"

class ServerTask(threading.Thread):
    """ServerTask"""
    def __init__(self):
        threading.Thread.__init__ (self)

    def run(self):
        context = zmq.Context()

        frontend = context.socket(zmq.ROUTER)
        backend = context.socket(zmq.DEALER)

        frontend.bind('tcp://*:5555')
        backend.bind('inproc://backend')

        workers = []
        for i in range(10):
            worker = ServerWorker(context)
            worker.start()
            workers.append(worker)

        zmq.proxy(frontend, backend)

        frontend.close()
        backend.close()
        context.term()

class ServerWorker(threading.Thread):
    """ServerWorker"""
    def __init__(self, context):
        threading.Thread.__init__ (self)
        self.context = context

    def run(self):
        worker = self.context.socket(zmq.DEALER)
        worker.connect('inproc://backend')
        print 'Worker started'
        while True:
            ident, msg = worker.recv_multipart()
            print 'Worker received ' + msg + ' from ' + ident

            video_file = msg
            hri = HeartRateImposer(video_file, opencv_path)

            # Send data generated by heart rate imposer
            for data in hri.gen_heartrate_frames():
                worker.send_multipart([ident, data])        

            # Tell the client we are done sending the files
            worker.send_multipart([ident, 'KILL'])

        worker.close()


def main():
    """main function"""
    server = ServerTask()
    server.start()

if __name__ == "__main__":
    print "Starting heart rate deamon server"
    main()
